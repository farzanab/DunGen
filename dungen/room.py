from random import randint

default_room_sizes = {
	'small':  {'min': 6, 'max': 10, 'max_monsters': 2},
	'medium': {'min': 8, 'max': 14, 'max_monsters': 4 },
	'large':  {'min': 12, 'max': 16, 'max_monsters': 6}
}

class Room:
	def __init__(self, start_x, start_y, width, height, max_monsters):
		self.x1 = start_x
		self.x2 = start_x + width - 1
		self.y1 = start_y
		self.y2 = start_y + height - 1
		self.num_monsters = 0
		self.max_monsters = max_monsters
		
	def intersect(self, other):
		return self.x1 <= other.x2 and self.x2 >= other.x1 and \
			   self.y1 <= other.y2 and self.y2 >= other.y1
			   
	def get_point(self):
		x = randint(self.x1+1, self.x2-1)
		y = randint(self.y1+1, self.y2-1)
		return (x, y)
		
	def __str__(self):
		return("({}, {}) ({}, {}) No. of Monsters: {}, Max: {}".format(self.x1, self.y1, self.x2, self.y2, self.num_monsters, self.max_monsters))
		
def gen_num_rooms(spec_dict, tries = []):
	"""Return a tuple of no. of rooms (small, medium, large) based on specs.
	
	spec_dict -- contains no. of rooms of types
	tries -- list of tuples already generated by this function (and tried)
	Depending on the presence of different keys in the dict, 
	generate the number of rooms of each type.
	"""
	
	rooms = spec_dict.get('rooms')
	random = False # False if spec_dict has enough info to generate the tuple without any randomisation
	if rooms is None:
		small, medium, large = spec_dict.get('small', 0), spec_dict.get('medium', 0), spec_dict.get('large', 0)
	else:
		small, medium, large = spec_dict.get('small'), spec_dict.get('medium'), spec_dict.get('large')
		
		if small is None and medium is None and large is None:
			c = 0
			while True:
				c += 1
				large = randint(rooms*2//11, rooms//2)
				remaining = rooms - large
				medium = randint(remaining//5, remaining*3//5)
				small = remaining - medium
				if (small, medium, large) not in tries:
					break
				if c == 100 or len(tries) == 50:
					small = None
					break
			random = True
		elif small is None and medium is None:
			c = 0
			while True:
				c += 1
				remaining = rooms - large
				medium = randint(remaining//5, remaining*3//5)
				small = remaining - medium
				if (small, medium, large) not in tries:
					break
				if c == 100 or len(tries) == 50:
					small = None
					break
			random = True
		elif small is None and large is None:
			c = 0
			while True:
				c += 1
				remaining = rooms - medium
				large = randint(remaining//5, remaining//2)
				small = remaining - large
				if (small, medium, large) not in tries:
					break
				if c == 100 or len(tries) == 50:
					small = None
					break
			random = True
		elif medium is None and large is None:
			c = 0
			while True:
				c += 1
				remaining = rooms - small
				large = randint(remaining//5, remaining//2)
				medium = remaining - large
				if (small, medium, large) not in tries:
					break
				if c == 100 or len(tries) == 50:
					small = None
					break
			random = True
		elif small is None:
			small = rooms - medium - large
		elif medium is None:
			medium = rooms - small - large
		elif large is None:
			large = rooms - small - medium
	
	if random:
		tries.append((small, medium, large))
	return small, medium, large, random
		
def gen_room_dict(spec_dict, monster_dict, small, medium, large):
	"""Generate room_dict based on specs in specs_dict."""
	room_sizes = dict(default_room_sizes)
	if spec_dict.get('small_min'):
		room_sizes['small']['min'] = spec_dict.get('small_min')
	if spec_dict.get('small_max'):
		room_sizes['small']['max'] = spec_dict.get('small_max')
	if spec_dict.get('medium_min'):
		room_sizes['medium']['min'] = spec_dict.get('medium_min')
	if spec_dict.get('medium_max'):
		room_sizes['medium']['max'] = spec_dict.get('medium_max')
	if spec_dict.get('large_min'):
		room_sizes['large']['min'] = spec_dict.get('large_min')
	if spec_dict.get('small_max'):
		room_sizes['large']['max'] = spec_dict.get('large_max')
	total_monsters = 0
	for monster in monster_dict.keys():
		total_monsters += spec_dict.get(monster, 0)
	n = small + medium + large
	
	if small == 0 and medium == 0:
		room_sizes['large']['max_monsters'] = total_monsters//large + 2
	elif small == 0 and large == 0:
		room_sizes['medium']['max_monsters'] = total_monsters//medium + 2
	elif medium == 0 and large == 0:
		room_sizes['small']['max_monsters'] = total_monsters//small + 2
	elif small == 0:
		l = room_sizes['medium']['max_monsters'] = max(total_monsters//n, room_sizes['medium']['max_monsters'])
		room_sizes['large']['max_monsters'] = max((total_monsters - medium*l)//large + 2, 4)
	elif medium == 0:
		l = room_sizes['small']['max_monsters'] = max(total_monsters//n - 2, room_sizes['medium']['max_monsters'])
		room_sizes['large']['max_monsters'] = max((total_monsters - small*l)//large + 2, 4)
	elif large == 0:
		l = room_sizes['small']['max_monsters'] = max(total_monsters//n - 1, room_sizes['medium']['max_monsters'])
		room_sizes['medium']['max_monsters'] = max((total_monsters - small*l)//medium + 2, 4)
	else:
		l1 = room_sizes['small']['max_monsters'] = max(total_monsters//n - 2, room_sizes['small']['max_monsters'])
		l2 = room_sizes['medium']['max_monsters'] = max(total_monsters//n, room_sizes['medium']['max_monsters'])
		room_sizes['large']['max_monsters'] = max((total_monsters - small*l1 - medium*l2)//large + 2, 4)
	return room_sizes
		
def dimension_gen(size, room_sizes):
	"""Return dimensions of room of parameter size."""
	min = room_sizes[size]['min']
	max = room_sizes[size]['max']
	max_monsters = room_sizes[size]['max_monsters']
	width = randint(min, max)
	height = randint(min, max)
	return width, height, max_monsters 